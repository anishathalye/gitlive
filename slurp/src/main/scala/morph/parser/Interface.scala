package morph.parser

import morph.ast._

import io.Source

/**
 * An interface to make using parsers easy.
 *
 * This interface makes calling parsers look like part of
 * the DSL.
 *
 * @example
 * {{{
 * scala> val root = parse file "data.xml" using XmlParser
 * root: morph.ast.ValueNode = ...
 * }}}
 *
 * @author Anish Athalye
 */
object Interface {

  /**
   * An object to help parse various data sources.
   */
  object parse {

    /**
     * Parse a string.
     *
     * @param str The string to parse.
     *
     * @return A Parsable instance that can be parsed using an AstBuilder.
     */
    def string(str: String): Parsable = new Parsable(str)

    /**
     * Parse a file specified by a given path.
     *
     * @param path The path of the file to parse.
     *
     * @throws FileNotFoundException If the file cannot be accessed.
     *
     * @return A Parsable instance that can be parsed using an AstBuilder.
     */
    def file(path: String): Parsable = {
      val source = Source fromFile path
      val data = source.getLines mkString "\n"
      source.close()
      new Parsable(data)
    }
  }

  /**
   * A class that holds ready-to-parse data.
   */
  class Parsable(data: String) {

    /**
     * Parse data using a specific parser.
     *
     * @param parser The parser to use.
     *
     * @throws ParsingException If an error occurs during parsing.
     *
     * @return The root of the AST generated by parsing the data.
     */
    def using(parser: AstBuilder): ValueNode = parser(data)
  }
}
